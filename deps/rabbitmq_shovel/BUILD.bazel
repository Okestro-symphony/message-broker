load("@rules_erlang//:erlc.bzl", "erlc")
load("@rules_erlang//:xref.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("//:rabbitmq_home.bzl", "rabbitmq_home")
load("//:rabbitmq_run.bzl", "rabbitmq_run")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "RABBITMQ_TEST_ERLC_OPTS",
    "assert_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
    "rabbitmq_suite",
)

APP_NAME = "rabbitmq_shovel"

APP_DESCRIPTION = "Data Shovel for RabbitMQ"

APP_MODULE = "rabbit_shovel"

APP_ENV = """[
	    {defaults, [
	        {prefetch_count,     1000},
	        {ack_mode,           on_confirm},
	        {publish_fields,     []},
	        {publish_properties, []},
	        {reconnect_delay,    5}
	      ]}
	  ]"""

EXTRA_APPS = [
    "crypto",
]

BUILD_DEPS = [
    "//deps/rabbitmq_cli:rabbitmqctl",
]

DEPS = [
    "//deps/amqp_client:erlang_app",
    "//deps/rabbit_common:erlang_app",
    "@lager//:erlang_app",
]

RUNTIME_DEPS = [
    "//deps/amqp10_client:erlang_app",
    "//deps/rabbit:erlang_app",
]

rabbitmq_app(
    app_description = APP_DESCRIPTION,
    app_env = APP_ENV,
    app_module = APP_MODULE,
    app_name = APP_NAME,
    build_deps = BUILD_DEPS,
    extra_apps = EXTRA_APPS,
    first_srcs = [
        "src/rabbit_shovel_behaviour.erl",
    ],
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

xref(tags = ["xref"])

plt(
    name = "base_plt",
    deps = DEPS,
)

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS + ["-Wno_behaviours"],
    plt = ":base_plt",
    tags = ["dialyze"],
    warnings_as_errors = False,
)

rabbitmq_home(
    name = "broker-for-tests-home",
    plugins = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_amqp1_0:erlang_app",
        ":erlang_app",
    ],
)

rabbitmq_run(
    name = "rabbitmq-for-tests-run",
    home = ":broker-for-tests-home",
)

erlc(
    name = "shovel_test_utils",
    testonly = True,
    srcs = [
        "test/shovel_test_utils.erl",
    ],
    dest = "test",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    deps = [
        "@lager//:erlang_app",
    ],
)

PACKAGE = "deps/rabbitmq_shovel"

suites = [
    rabbitmq_integration_suite(
        PACKAGE,
        name = "amqp10_dynamic_SUITE",
        additional_beam = [
            ":shovel_test_utils",
        ],
        flaky = True,
    ),
    rabbitmq_suite(
        name = "amqp10_shovel_SUITE",
        size = "small",
        runtime_deps = [
            "@meck//:erlang_app",
        ],
        deps = [
            "//deps/amqp10_common:erlang_app",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "amqp10_SUITE",
    ),
    rabbitmq_suite(
        name = "config_SUITE",
        size = "small",
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "configuration_SUITE",
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "delete_shovel_command_SUITE",
        additional_beam = [
            ":shovel_test_utils",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "dynamic_SUITE",
        additional_beam = [
            ":shovel_test_utils",
        ],
        flaky = True,
    ),
    rabbitmq_suite(
        name = "parameters_SUITE",
        size = "small",
        deps = [
            "//deps/rabbit_common:erlang_app",
        ],
    ),
    rabbitmq_integration_suite(
        PACKAGE,
        name = "shovel_status_command_SUITE",
        additional_beam = [
            ":shovel_test_utils",
        ],
    ),
]

assert_suites(
    suites,
    glob(["test/**/*_SUITE.erl"]),
)
